service: slack-dispatcher-service

plugins:
  - serverless-offline
  - serverless-offline-sns

custom:
  custom:
  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: true
    # host: 0.0.0.0 # Optional, defaults to 127.0.0.1 if not provided to serverless-offline
    # sns-endpoint: http://127.0.0.1:4567 # Optional. Only if you want to use a custom endpoint
    # accountId: 123456789012 # Optional
  mySnsTopic: "${self:service}-${self:provider.stage}-register"
  mySnsTopicArn:
    local: "arn:aws:sns:us-east-1:123456789012:${self:custom.mySnsTopic}"
    dev:
      {
        "Fn::Join":
          [
            "",
            [
              "arn:aws:sns:${self:provider.region}:",
              { "Ref": "AWS::AccountId" },
              ":${self:custom.mySnsTopic}",
            ],
          ],
      }
    prod:
      {
        "Fn::Join":
          [
            "",
            [
              "arn:aws:sns:${self:provider.region}:",
              { "Ref": "AWS::AccountId" },
              ":${self:custom.mySnsTopic}",
            ],
          ],
      }

provider:
  profile: release-bot
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage,'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: "*"

# TODO: Remove this from here. We should create the sns topics in the consumers, not the publishers.
# TODO: For consumers, use filters: https://serverless.com/framework/docs/providers/aws/events/sns#setting-a-filter-policy
resources: # CloudFormation template syntax
  Resources:
    registerTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.mySnsTopic}

functions:
  dispatcher:
    handler: handler.dispatcher
    events:
      - http:
          path: slack/dispatcher
          method: post
          integration: lambda
    environment:
      mySnsTopicArn: ${self:custom.mySnsTopicArn.${self:provider.stage}}
      myRegion: ${opt:region, 'us-east-1'}
