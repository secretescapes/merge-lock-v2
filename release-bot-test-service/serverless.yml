# Welcome to Serverless!

service: release-bot-test-service
provider:
  profile: release-bot
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage,'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - SNS:Publish
        - "cloudwatch:*"
        - "dynamodb:*"
      Resource: "*"

custom:
  env:
    dynamoDBResponsesTableName: ${self:service}-responses-${self:provider.stage}
    myRegion: ${opt:region, 'us-east-1'}

resources: # CloudFormation template syntax
  Resources:
    responsesTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: uuid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.env.dynamoDBResponsesTableName}"

functions:
  getResponses:
    handler: handler.getResponses
    events:
      - http:
          path: responses/get
          method: get
          integration: lambda
    environment: ${self:custom.env}
  postResponses:
    handler: handler.postResponses
    events:
      - http:
          path: responses/post
          method: post
          integration: lambda
    environment: ${self:custom.env}
  retrieveResponses:
    handler: handler.retrieveResponses
    events:
      - http:
          path: responses/retrieve/{id}
          method: get
          integration: lambda
    environment: ${self:custom.env}
