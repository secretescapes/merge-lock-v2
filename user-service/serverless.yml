service: user-service # NOTE: update this with your service name

plugins:
  - serverless-offline
  - serverless-offline-sns
  - serverless-pseudo-parameters

custom:
  dynamodbTableName: user-service-users-${self:provider.stage}
  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: true
    # host: 0.0.0.0 # Optional, defaults to 127.0.0.1 if not provided to serverless-offline
    # sns-endpoint: http://127.0.0.1:4567 # Optional. Only if you want to use a custom endpoint
    # accountId: 123456789012 # Optional
  registerTopic: "${self:provider.stage}-register"
  registerTopicArn:
    local: "arn:aws:sns:us-east-1:123456789012:${self:custom.registerTopic}"
    dev:
      {
        "Fn::Join":
          [
            "",
            [
              "arn:aws:sns:${self:provider.region}:",
              { "Ref": "AWS::AccountId" },
              ":${self:custom.registerTopic}",
            ],
          ],
      }
    prod:
      {
        "Fn::Join":
          [
            "",
            [
              "arn:aws:sns:${self:provider.region}:",
              { "Ref": "AWS::AccountId" },
              ":${self:custom.registerTopic}",
            ],
          ],
      }
  responsesTopic: "${self:provider.stage}-responses"
  responsesTopicArn:
    local: "arn:aws:sns:us-east-1:123456789012:${self:custom.responsesTopic}"
    dev:
      {
        "Fn::Join":
          [
            "",
            [
              "arn:aws:sns:${self:provider.region}:",
              { "Ref": "AWS::AccountId" },
              ":${self:custom.responsesTopic}",
            ],
          ],
      }
    prod:
      {
        "Fn::Join":
          [
            "",
            [
              "arn:aws:sns:${self:provider.region}:",
              { "Ref": "AWS::AccountId" },
              ":${self:custom.responsesTopic}",
            ],
          ],
      }

provider:
  profile: release-bot
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage,'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - SNS:Publish
        - "dynamodb:*"
      Resource: "*"

functions:
  register:
    handler: handler.register
    events:
      - sns: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.registerTopic}
    environment:
      myRegion: ${opt:region, 'us-east-1'}
      dynamoDBUserTableName: ${self:custom.dynamodbTableName}
      responsesTopicArn: ${self:custom.responsesTopicArn.${self:provider.stage}}

resources:
  Resources:
    # TODO: Remove this from here. We should create the sns topics in the consumers, not the publishers.
    responsesTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.responsesTopic}
    userEventsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.dynamodbTableName}"
